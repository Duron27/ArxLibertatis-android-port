diff --git a/apps/openmw/mwrender/luminancecalculator.cpp b/apps/openmw/mwrender/luminancecalculator.cpp
index ae29b7fdcc8d..de4ac766f1bb 100644
--- a/apps/openmw/mwrender/luminancecalculator.cpp
+++ b/apps/openmw/mwrender/luminancecalculator.cpp
@@ -26,7 +26,7 @@ namespace MWRender
             buffer.mipmappedSceneLuminanceTex = new osg::Texture2D;
             buffer.mipmappedSceneLuminanceTex->setInternalFormat(GL_R16F);
             buffer.mipmappedSceneLuminanceTex->setSourceFormat(GL_RED);
-            buffer.mipmappedSceneLuminanceTex->setSourceType(GL_FLOAT);
+            buffer.mipmappedSceneLuminanceTex->setSourceType(GL_HALF_FLOAT);
             buffer.mipmappedSceneLuminanceTex->setWrap(osg::Texture::WRAP_S, osg::Texture::CLAMP_TO_EDGE);
             buffer.mipmappedSceneLuminanceTex->setWrap(osg::Texture::WRAP_T, osg::Texture::CLAMP_TO_EDGE);
             buffer.mipmappedSceneLuminanceTex->setFilter(
@@ -37,7 +37,7 @@ namespace MWRender
             buffer.luminanceTex = new osg::Texture2D;
             buffer.luminanceTex->setInternalFormat(GL_R16F);
             buffer.luminanceTex->setSourceFormat(GL_RED);
-            buffer.luminanceTex->setSourceType(GL_FLOAT);
+            buffer.luminanceTex->setSourceType(GL_HALF_FLOAT);
             buffer.luminanceTex->setWrap(osg::Texture::WRAP_S, osg::Texture::CLAMP_TO_EDGE);
             buffer.luminanceTex->setWrap(osg::Texture::WRAP_T, osg::Texture::CLAMP_TO_EDGE);
             buffer.luminanceTex->setFilter(osg::Texture2D::MIN_FILTER, osg::Texture2D::NEAREST);
diff --git a/apps/openmw/mwrender/npcanimation.cpp b/apps/openmw/mwrender/npcanimation.cpp
index 01bdcec665ed..a34633fae79a 100644
--- a/apps/openmw/mwrender/npcanimation.cpp
+++ b/apps/openmw/mwrender/npcanimation.cpp
@@ -347,7 +347,7 @@ namespace MWRender
             auto primaryFBO = postProcessor->getPrimaryFbo(frameId);
             primaryFBO->apply(*state);

-            postProcessor->getFbo(PostProcessor::FBO_OpaqueDepth, frameId)->apply(*state);
+//            postProcessor->getFbo(PostProcessor::FBO_OpaqueDepth, frameId)->apply(*state);

             // depth accumulation pass
             osg::ref_ptr<osg::StateSet> restore = bin->getStateSet();
diff --git a/apps/openmw/mwrender/postprocessor.cpp b/apps/openmw/mwrender/postprocessor.cpp
index 1aaeb460b7db..d3f4ed092c33 100644
--- a/apps/openmw/mwrender/postprocessor.cpp
+++ b/apps/openmw/mwrender/postprocessor.cpp
@@ -300,7 +300,7 @@ namespace MWRender
         mCanvases[frameId]->setCalculateAvgLum(mHDR);

         mCanvases[frameId]->setTextureScene(getTexture(Tex_Scene, frameId));
-        mCanvases[frameId]->setTextureDepth(getTexture(Tex_OpaqueDepth, frameId));
+        mCanvases[frameId]->setTextureDepth(getTexture(Tex_Depth, frameId));
         mCanvases[frameId]->setTextureDistortion(getTexture(Tex_Distortion, frameId));

         mTransparentDepthPostPass->mFbo[frameId] = mFbos[frameId][FBO_Primary];

diff --git a/apps/openmw/mwrender/renderingmanager.cpp b/apps/openmw/mwrender/renderingmanager.cpp
index fa90a7feae3d..fb1892211320 100644
--- a/apps/openmw/mwrender/renderingmanager.cpp
+++ b/apps/openmw/mwrender/renderingmanager.cpp
@@ -470,8 +470,8 @@ namespace MWRender

         mPostProcessor = new PostProcessor(*this, viewer, mRootNode, resourceSystem->getVFS());
         resourceSystem->getSceneManager()->setOpaqueDepthTex(
-            mPostProcessor->getTexture(PostProcessor::Tex_OpaqueDepth, 0),
-            mPostProcessor->getTexture(PostProcessor::Tex_OpaqueDepth, 1));
+            mPostProcessor->getTexture(PostProcessor::Tex_Depth, 0),
+            mPostProcessor->getTexture(PostProcessor::Tex_Depth, 1));
         resourceSystem->getSceneManager()->setSoftParticles(Settings::shaders().mSoftParticles);
         resourceSystem->getSceneManager()->setSupportsNormalsRT(mPostProcessor->getSupportsNormalsRT());
         resourceSystem->getSceneManager()->setWeatherParticleOcclusion(Settings::shaders().mWeatherParticleOcclusion);
diff --git a/apps/openmw/mwrender/transparentpass.cpp b/apps/openmw/mwrender/transparentpass.cpp
index ce53b1c2193e..431c26c179c0 100644
--- a/apps/openmw/mwrender/transparentpass.cpp
+++ b/apps/openmw/mwrender/transparentpass.cpp
@@ -92,8 +92,9 @@ namespace MWRender
         else
         {
             opaqueFbo->apply(state, osg::FrameBufferObject::DRAW_FRAMEBUFFER);
-            ext->glBlitFramebuffer(0, 0, tex->getTextureWidth(), tex->getTextureHeight(), 0, 0, tex->getTextureWidth(),
-                tex->getTextureHeight(), GL_DEPTH_BUFFER_BIT, GL_NEAREST);
+//            ext->glBlitFramebuffer(0, 0, tex->getTextureWidth(), tex->getTextureHeight(), 0, 0, tex->getTextureWidth(),
+//                tex->getTextureHeight(), GL_DEPTH_BUFFER_BIT, GL_NEAREST);
+            glClear(GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);
         }

         msaaFbo ? msaaFbo->apply(state, osg::FrameBufferObject::DRAW_FRAMEBUFFER)
@@ -105,7 +106,7 @@ namespace MWRender
         if (!mPostPass)
             return;

-        opaqueFbo->apply(state, osg::FrameBufferObject::DRAW_FRAMEBUFFER);
+//        opaqueFbo->apply(state, osg::FrameBufferObject::DRAW_FRAMEBUFFER);

         // draw transparent post-pass to populate a postprocess friendly depth texture with alpha-clipped geometry

diff --git a/components/fx/pass.cpp b/components/fx/pass.cpp
index cf50d20fe22d..20d090ef6cf5 100644
--- a/components/fx/pass.cpp
+++ b/components/fx/pass.cpp
@@ -89,7 +89,7 @@ namespace fx

 uniform @builtinSampler omw_SamplerLastShader;
 uniform @builtinSampler omw_SamplerLastPass;
-uniform @builtinSampler omw_SamplerDepth;
+uniform highp @builtinSampler omw_SamplerDepth;
 uniform @builtinSampler omw_SamplerNormals;
 uniform @builtinSampler omw_SamplerDistortion;

diff --git a/components/shader/shadervisitor.cpp b/components/shader/shadervisitor.cpp
index 70464f571e62..1dc9a9314209 100644
--- a/components/shader/shadervisitor.cpp
+++ b/components/shader/shadervisitor.cpp
@@ -28,6 +28,8 @@
 #include <components/settings/settings.hpp>
 #include <components/stereo/stereomanager.hpp>
 #include <components/vfs/manager.hpp>
+#include <components/settings/values.hpp>
+#include <components/sceneutil/depth.hpp>

 #include "removedalphafunc.hpp"
 #include "shadermanager.hpp"
@@ -730,6 +732,13 @@ namespace Shader
             updateRemovedState(*writableUserData, removedState);
         }

+        if (reqs.mAlphaBlend && Settings::postProcessing().mTransparentPostpass && Settings::postProcessing().mEnabled)
+        {
+            osg::ref_ptr<osg::Depth> depth = new SceneUtil::AutoDepth;
+            depth->setWriteMask(false);
+            writableStateSet->setAttributeAndModes(depth, osg::StateAttribute::ON | osg::StateAttribute::OVERRIDE);
+        }
+
         defineMap["softParticles"] = reqs.mSoftParticles ? "1" : "0";

         Stereo::shaderStereoDefines(defineMap);
